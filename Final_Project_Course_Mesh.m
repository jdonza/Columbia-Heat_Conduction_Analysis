close all
clear
clc
%% Nodal Coordinates from Abaqus
% Nodal = [1 , 0 , 0
%     2,2,0.5
%     3,0,1
%     4,2,1];
Nodal = [1,  0.149861485,  0.149861485
    2,           0.,  0.211936146
    3,           0.,  0.100000001
    4, 0.0707106814, 0.0707106814
    5,  0.546369493,  0.651137769
    6,  0.601040781,  0.601040781
    7,  0.883883476,  0.883883476
    8,  0.803484499,  0.957555532
    9,           0.,  0.850000024
    10,  0.134450868,  0.163828865
    11,  0.117745414,  0.176218465
    12,  0.099906005,  0.186911002
    13, 0.0811044499,  0.195803463
    14,  0.061521817,  0.202810243
    15, 0.0413466915,  0.207863852
    16, 0.0207733754,   0.21091561
    17,           0.,    0.1746241
    18,           0.,  0.137312055
    19, 0.00980171375, 0.0995184705
    20, 0.0195090324, 0.0980785266
    21, 0.0290284678, 0.0956940353
    22, 0.0382683426, 0.0923879519
    23, 0.0471396744, 0.0881921276
    24, 0.0555570237, 0.0831469595
    25, 0.0634393319, 0.0773010477
    26, 0.0970942825, 0.0970942825
    27,  0.123477884,  0.123477884
    28,  0.629325032,  0.629325032
    29,  0.657609284,  0.657609284
    30,  0.685893595,  0.685893595
    31,  0.714177847,  0.714177847
    32,  0.742462099,  0.742462099
    33,   0.77074641,   0.77074641
    34,  0.799030662,  0.799030662
    35,  0.827314913,  0.827314913
    36,  0.855599225,  0.855599225
    37,  0.777773023,  0.926913798
    38,  0.752061486,  0.896272004
    39,  0.726350009,  0.865630209
    40,  0.700638473,  0.834988415
    41,  0.674926996,  0.804346681
    42,   0.64921546,  0.773704886
    43,  0.623503983,  0.743063092
    44,  0.597792506,  0.712421358
    45,   0.57208097,  0.681779563
    46,  0.478822052,  0.702302933
    47,  0.406515896,  0.746488333
    48,  0.330169588,  0.783254802
    49,  0.250541896,  0.812236905
    50,  0.168424219,  0.833146632
    51, 0.0846326724,  0.845776141
    52,           0.,     0.810121
    53,           0.,  0.770242035
    54,           0.,  0.730363011
    55,           0.,  0.690484047
    56,           0.,  0.650605023
    57,           0.,  0.610726058
    58,           0.,  0.570847094
    59,           0.,   0.53096807
    60,           0.,  0.491089076
    61,           0.,  0.451210082
    62,           0.,  0.411331087
    63,           0.,  0.371452123
    64,           0.,  0.331573129
    65,           0.,  0.291694134
    66,           0.,   0.25181514
    67,  0.178060189,  0.178060189
    68,  0.206258893,  0.206258893
    69,  0.234457597,  0.234457597
    70,  0.262656301,  0.262656301
    71,   0.29085502,   0.29085502
    72,   0.31905371,   0.31905371
    73,  0.347252429,  0.347252429
    74,  0.375451118,  0.375451118
    75,  0.403649837,  0.403649837
    76,  0.431848526,  0.431848526
    77,  0.460047245,  0.460047245
    78,  0.488245934,  0.488245934
    79,  0.516444623,  0.516444623
    80,  0.544643342,  0.544643342
    81,  0.572842062,  0.572842062
    82,  0.110780358,  0.134986252
    83, 0.0970159546,  0.145194635
    84, 0.0823172331,  0.154004708
    85, 0.0668257475,  0.161331624
    86, 0.0506906994,   0.16710484
    87, 0.0340674706,  0.171268746
    88, 0.0171161555,  0.173783243
    89, 0.0871098414,  0.106143646
    90, 0.0762864873,  0.114170797
    91, 0.0647284538,  0.121098414
    92, 0.0525470451,  0.126859799
    93, 0.0398595855,  0.131399438
    94, 0.0267882515,   0.13467364
    95, 0.0134589346,   0.13665086
    96,  0.520624578,  0.620680988
    97,   0.45625475,  0.669422686
    98,  0.387352765,  0.711514771
    99,  0.314603001,  0.746539056
    100,  0.238728136,  0.774147749
    101,   0.16048187,  0.794066429
    102, 0.0806414634,  0.806097388
    103,  0.494879633,  0.590224147
    104,  0.433687478,   0.63654238
    105,  0.368189633,   0.67654115
    106,  0.299036443,   0.70982337
    107,  0.226914391,  0.736058533
    108,  0.152539536,  0.754986286
    109, 0.0766502544,  0.766418576
    110,  0.469134718,  0.559767365
    111,  0.411120176,  0.603662133
    112,  0.349026531,  0.641567588
    113,  0.283469856,  0.673107684
    114,  0.215100631,  0.697969377
    115,  0.144597188,  0.715906084
    116, 0.0726590529,  0.726739824
    117,  0.443389833,  0.529310524
    118,  0.388552904,  0.570781827
    119,  0.329863399,  0.606594026
    120,  0.267903298,  0.636391938
    121,  0.203286871,  0.659880221
    122,  0.136654839,  0.676825941
    123, 0.0686678439,  0.687061012
    124,  0.417644918,  0.498853743
    125,  0.365985602,   0.53790158
    126,  0.310700297,  0.571620405
    127,  0.252336711,  0.599676251
    128,  0.191473126,  0.621791065
    129,   0.12871249,  0.637745738
    130, 0.0646766424,  0.647382259
    131,  0.391900003,  0.468396932
    132,    0.3434183,  0.505021274
    133,  0.291537166,  0.536646843
    134,  0.236770153,  0.562960565
    135,  0.179659367,  0.583701909
    136,  0.120770149,  0.598665595
    137, 0.0606854334,  0.607703447
    138,  0.366155088,  0.437940121
    139,  0.320851028,  0.472140998
    140,  0.272374064,  0.501673222
    141,   0.22120358,  0.526244819
    142,  0.167845607,  0.545612752
    143,    0.1128278,  0.559585392
    144, 0.0566942282,  0.568024695
    145,  0.340410173,   0.40748331
    146,  0.298283726,  0.439260721
    147,  0.253210932,   0.46669966
    148,  0.205637008,  0.489529133
    149,  0.156031862,  0.507523596
    150,  0.104885459,   0.52050525
    151,  0.052703023,  0.528345883
    152,  0.314665258,  0.377026498
    153,  0.275716454,  0.406380445
    154,   0.23404783,  0.431726068
    155,   0.19007045,  0.452813417
    156,  0.144218102,   0.46943441
    157, 0.0969431102,  0.481425077
    158, 0.0487118177,  0.488667101
    159,  0.288920343,  0.346569717
    160,  0.253149152,  0.373500139
    161,  0.214884713,  0.396752506
    162,  0.174503878,  0.416097701
    163,  0.132404342,  0.431345224
    164, 0.0890007615,  0.442344904
    165, 0.0447206087,  0.448988318
    166,  0.263175428,  0.316112906
    167,  0.230581865,  0.340619862
    168,  0.195721596,  0.361778915
    169,  0.158937305,  0.379382014
    170,   0.12059059,  0.393256068
    171, 0.0810584202,  0.403264731
    172, 0.0407294035,  0.409309536
    173,  0.237430513,  0.285656095
    174,  0.208014578,  0.307739586
    175,   0.17655848,  0.326805323
    176,  0.143370733,  0.342666298
    177,  0.108776838,  0.355166912
    178, 0.0731160715,  0.364184558
    179, 0.0367381983,  0.369630754
    180,  0.211685613,  0.255199283
    181,  0.185447291,  0.274859309
    182,  0.157395363,  0.291831762
    183,   0.12780416,  0.305950582
    184, 0.0969630852,  0.317077756
    185, 0.0651737303,  0.325104386
    186,  0.032746993,  0.329951972
    187,  0.185940698,  0.224742472
    188,  0.162879989,  0.241979033
    189,  0.138232246,   0.25685817
    190,  0.112237595,  0.269234896
    191, 0.0851493254,   0.27898857
    192, 0.0572313815,  0.286024213
    193, 0.0287557878,   0.29027319
    194,  0.160195783,  0.194285661
    195,  0.140312701,  0.209098741
    196,  0.119069129,  0.221884578
    197, 0.0966710225,   0.23251918
    198, 0.0733355731,  0.240899414
    199, 0.0492890365,  0.246944025
    200, 0.0247645807,  0.250594407];
%% Elements Connectivity from Abaqus
% IEN = [1 2
%     1 2
%     2 4
%     3 3];

IEN = [1,  1, 10, 27
    2, 10, 82, 27
    3, 10, 11, 82
    4, 11, 83, 82
    5, 11, 12, 83
    6, 12, 84, 83
    7, 12, 13, 84
    8, 13, 85, 84
    9, 13, 14, 85
    10, 14, 86, 85
    11, 14, 15, 86
    12, 15, 87, 86
    13, 15, 16, 87
    14, 16, 88, 87
    15, 16,  2, 88
    16,  2, 17, 88
    17, 27, 82, 26
    18, 82, 89, 26
    19, 82, 83, 89
    20, 83, 90, 89
    21, 83, 84, 90
    22, 84, 91, 90
    23, 84, 85, 91
    24, 85, 92, 91
    25, 85, 86, 92
    26, 86, 93, 92
    27, 86, 87, 93
    28, 87, 94, 93
    29, 87, 88, 94
    30, 88, 95, 94
    31, 88, 17, 95
    32, 17, 18, 95
    33, 26, 89,  4
    34, 89, 25,  4
    35, 89, 90, 25
    36, 90, 24, 25
    37, 90, 91, 24
    38, 91, 23, 24
    39, 91, 92, 23
    40, 92, 22, 23
    41, 92, 93, 22
    42, 93, 21, 22
    43, 93, 94, 21
    44, 94, 20, 21
    45, 94, 95, 20
    46, 95, 19, 20
    47, 95, 18, 19
    48, 18,  3, 19
    49,  5,  6, 28
    50, 28, 45,  5
    51, 45, 28, 29
    52, 29, 44, 45
    53, 44, 29, 30
    54, 30, 43, 44
    55, 43, 30, 31
    56, 31, 42, 43
    57, 42, 31, 32
    58, 32, 41, 42
    59, 41, 32, 33
    60, 33, 40, 41
    61, 40, 33, 34
    62, 34, 39, 40
    63, 39, 34, 35
    64, 35, 38, 39
    65, 38, 35, 36
    66, 36, 37, 38
    67, 37, 36,  7
    68,  7,  8, 37
    69,   6,   5,  81
    70,   5,  96,  81
    71,   5,  46,  96
    72,  46,  97,  96
    73,  46,  47,  97
    74,  47,  98,  97
    75,  47,  48,  98
    76,  48,  99,  98
    77,  48,  49,  99
    78,  49, 100,  99
    79,  49,  50, 100
    80,  50, 101, 100
    81,  50,  51, 101
    82,  51, 102, 101
    83,  51,   9, 102
    84,   9,  52, 102
    85,  81,  96,  80
    86,  96, 103,  80
    87,  96,  97, 103
    88,  97, 104, 103
    89,  97,  98, 104
    90,  98, 105, 104
    91,  98,  99, 105
    92,  99, 106, 105
    93,  99, 100, 106
    94, 100, 107, 106
    95, 100, 101, 107
    96, 101, 108, 107
    97, 101, 102, 108
    98, 102, 109, 108
    99, 102,  52, 109
    100,  52,  53, 109
    101,  80, 103,  79
    102, 103, 110,  79
    103, 103, 104, 110
    104, 104, 111, 110
    105, 104, 105, 111
    106, 105, 112, 111
    107, 105, 106, 112
    108, 106, 113, 112
    109, 106, 107, 113
    110, 107, 114, 113
    111, 107, 108, 114
    112, 108, 115, 114
    113, 108, 109, 115
    114, 109, 116, 115
    115, 109,  53, 116
    116,  53,  54, 116
    117,  79, 110,  78
    118, 110, 117,  78
    119, 110, 111, 117
    120, 111, 118, 117
    121, 111, 112, 118
    122, 112, 119, 118
    123, 112, 113, 119
    124, 113, 120, 119
    125, 113, 114, 120
    126, 114, 121, 120
    127, 114, 115, 121
    128, 115, 122, 121
    129, 115, 116, 122
    130, 116, 123, 122
    131, 116,  54, 123
    132,  54,  55, 123
    133,  78, 117,  77
    134, 117, 124,  77
    135, 117, 118, 124
    136, 118, 125, 124
    137, 118, 119, 125
    138, 119, 126, 125
    139, 119, 120, 126
    140, 120, 127, 126
    141, 120, 121, 127
    142, 121, 128, 127
    143, 121, 122, 128
    144, 122, 129, 128
    145, 122, 123, 129
    146, 123, 130, 129
    147, 123,  55, 130
    148,  55,  56, 130
    149,  77, 124,  76
    150, 124, 131,  76
    151, 124, 125, 131
    152, 125, 132, 131
    153, 125, 126, 132
    154, 126, 133, 132
    155, 126, 127, 133
    156, 127, 134, 133
    157, 127, 128, 134
    158, 128, 135, 134
    159, 128, 129, 135
    160, 129, 136, 135
    161, 129, 130, 136
    162, 130, 137, 136
    163, 130,  56, 137
    164,  56,  57, 137
    165,  76, 131,  75
    166, 131, 138,  75
    167, 131, 132, 138
    168, 132, 139, 138
    169, 132, 133, 139
    170, 133, 140, 139
    171, 133, 134, 140
    172, 134, 141, 140
    173, 134, 135, 141
    174, 135, 142, 141
    175, 135, 136, 142
    176, 136, 143, 142
    177, 136, 137, 143
    178, 137, 144, 143
    179, 137,  57, 144
    180,  57,  58, 144
    181,  75, 138,  74
    182, 138, 145,  74
    183, 138, 139, 145
    184, 139, 146, 145
    185, 139, 140, 146
    186, 140, 147, 146
    187, 140, 141, 147
    188, 141, 148, 147
    189, 141, 142, 148
    190, 142, 149, 148
    191, 142, 143, 149
    192, 143, 150, 149
    193, 143, 144, 150
    194, 144, 151, 150
    195, 144,  58, 151
    196,  58,  59, 151
    197,  74, 145,  73
    198, 145, 152,  73
    199, 145, 146, 152
    200, 146, 153, 152
    201, 146, 147, 153
    202, 147, 154, 153
    203, 147, 148, 154
    204, 148, 155, 154
    205, 148, 149, 155
    206, 149, 156, 155
    207, 149, 150, 156
    208, 150, 157, 156
    209, 150, 151, 157
    210, 151, 158, 157
    211, 151,  59, 158
    212,  59,  60, 158
    213,  73, 152,  72
    214, 152, 159,  72
    215, 152, 153, 159
    216, 153, 160, 159
    217, 153, 154, 160
    218, 154, 161, 160
    219, 154, 155, 161
    220, 155, 162, 161
    221, 155, 156, 162
    222, 156, 163, 162
    223, 156, 157, 163
    224, 157, 164, 163
    225, 157, 158, 164
    226, 158, 165, 164
    227, 158,  60, 165
    228,  60,  61, 165
    229,  72, 159,  71
    230, 159, 166,  71
    231, 159, 160, 166
    232, 160, 167, 166
    233, 160, 161, 167
    234, 161, 168, 167
    235, 161, 162, 168
    236, 162, 169, 168
    237, 162, 163, 169
    238, 163, 170, 169
    239, 163, 164, 170
    240, 164, 171, 170
    241, 164, 165, 171
    242, 165, 172, 171
    243, 165,  61, 172
    244,  61,  62, 172
    245,  71, 166,  70
    246, 166, 173,  70
    247, 166, 167, 173
    248, 167, 174, 173
    249, 167, 168, 174
    250, 168, 175, 174
    251, 168, 169, 175
    252, 169, 176, 175
    253, 169, 170, 176
    254, 170, 177, 176
    255, 170, 171, 177
    256, 171, 178, 177
    257, 171, 172, 178
    258, 172, 179, 178
    259, 172,  62, 179
    260,  62,  63, 179
    261,  70, 173,  69
    262, 173, 180,  69
    263, 173, 174, 180
    264, 174, 181, 180
    265, 174, 175, 181
    266, 175, 182, 181
    267, 175, 176, 182
    268, 176, 183, 182
    269, 176, 177, 183
    270, 177, 184, 183
    271, 177, 178, 184
    272, 178, 185, 184
    273, 178, 179, 185
    274, 179, 186, 185
    275, 179,  63, 186
    276,  63,  64, 186
    277,  69, 180,  68
    278, 180, 187,  68
    279, 180, 181, 187
    280, 181, 188, 187
    281, 181, 182, 188
    282, 182, 189, 188
    283, 182, 183, 189
    284, 183, 190, 189
    285, 183, 184, 190
    286, 184, 191, 190
    287, 184, 185, 191
    288, 185, 192, 191
    289, 185, 186, 192
    290, 186, 193, 192
    291, 186,  64, 193
    292,  64,  65, 193
    293,  68, 187,  67
    294, 187, 194,  67
    295, 187, 188, 194
    296, 188, 195, 194
    297, 188, 189, 195
    298, 189, 196, 195
    299, 189, 190, 196
    300, 190, 197, 196
    301, 190, 191, 197
    302, 191, 198, 197
    303, 191, 192, 198
    304, 192, 199, 198
    305, 192, 193, 199
    306, 193, 200, 199
    307, 193,  65, 200
    308,  65,  66, 200
    309,  67, 194,   1
    310, 194,  10,   1
    311, 194, 195,  10
    312, 195,  11,  10
    313, 195, 196,  11
    314, 196,  12,  11
    315, 196, 197,  12
    316, 197,  13,  12
    317, 197, 198,  13
    318, 198,  14,  13
    319, 198, 199,  14
    320, 199,  15,  14
    321, 199, 200,  15
    322, 200,  16,  15
    323, 200,  66,  16
    324,  66,   2,  16]';
%% Mesh Specifications
nsd = 2; % number of spacial dimensions
%nnp = 4;
nnp = 200;         % number of total nodes
%nel = 2;
nel = 324;         % number of total elements
nen = 3;          % number of nodes on each element
ndof = 1;         % degrees-of-freedom per node
neq  = nnp*ndof;  % number of equations

f = zeros(neq,1);      % initialize nodal flux vector
d = zeros(neq,1);      % initialize nodal temperature vector
K = zeros(neq);        % initialize stiffness matrix

flags = zeros(neq,1);  % array to set B.C flags
e_bc  = zeros(neq,1);  % essential B.C array
n_bc  = zeros(neq,1);  % natural B.C array
P    = zeros(neq,1);   % initialize point source defined at a node
s     = 6*ones(nen,nel);  %  heat source defined over nodes
%% Material Property; Create kappa matrix
% kappa(1) = 5;
% kappa(2) = 5;
%Set up for Rubber
i = 1;
for i = 1:nnp
    r = sqrt((Nodal(i,2))^2 + (Nodal(i,3))^2);
    if r <= 0.18 %To account for approximations in nodal coordinates
        Kr(i) = 1; %W/mC
    else
        Kr(i) = 0;
    end
end
ind = find(Kr);
Lia = ismember(IEN,ind);
i = 1;
for i = 1:nel
    if Lia(2,i) && Lia(3,i) && Lia(4,i) == 1
        kappa(i) = 1;
    else
        kappa(i) = 0;
    end
end

% Set up for Steel
i = 1;
for i = 1:nnp
    r = sqrt((Nodal(i,2))^2 + (Nodal(i,3))^2);
    r = round(r,5);
    if (r >=.16) && (r <= .85)
        Ks(i) = 1; %W/mC
    else
        Ks(i) = 0;
    end
end
ind = find(Ks);
Lia = ismember(IEN,ind);
i = 1;
for i = 1:nel
    if Lia(2,i) && Lia(3,i) && Lia(4,i) == 1
        kappa(i) = 55;
    end
end
% Set up for Platinum
i = 1;
for i = 1:nnp
    r = sqrt((Nodal(i,2))^2 + (Nodal(i,3))^2);
    if (r >=.85) && (r <= 1.5)
        Kp(i) = 1; %W/mC
    else
        Kp(i) = 0;
    end
end
ind = find(Kp);
Lia = ismember(IEN,ind);
i = 1;
for i = 1:nel
    if Lia(2,i) && Lia(3,i) && Lia(4,i)== 1
        kappa(i) = 71;
    end
end
%% Gauss Integration
ngp    = 2;                          % number of gauss points
%% plots

compute_flux = 'yes';
plot_mesh    = 'yes';
plot_nod     = 'yes';
plot_temp    = 'yes';
plot_flux    = 'yes';
%% Set up Flags vector
% flags = [ 1 2
%     2 2
%     3 2
%     4 1];
for i = 1:nnp

    r = sqrt((Nodal(i,2))^2 + (Nodal(i,3))^2);
    r = round(r,5);
    theta = atand(Nodal(i,2)/Nodal(i,3));
    theta = round(theta,5);

    if Nodal(i,2) == 0 %collects nodes on the y-axis
        flags(i,1) = Nodal(i,1);
        flags(i,2) = 1;
        n_bc(i) = Nodal(i,1);
        n_bc(i,2) = 0;
    end

    if (r == 0.85) && (theta <= 40) %collects nodes along top of steel boundary
        flags(i,1) = Nodal(i,1);
        flags(i,2) = 1;
        n_bc(i) = Nodal(i,1);
        n_bc(i,2) = 1300;
    end

    if (r >= 0.85) && (theta == 40) %collects nodes along left boundary of platinum
        flags(i,1) = Nodal(i,1);
        flags(i,2) = 1;
        n_bc(i) = Nodal(i,1);
        n_bc(i,2) = 1800;
    end

    if (r == 1.25) %collects nodes along top boundary of platinum
        flags(i,1) = Nodal(i,1);
        flags(i,2) = 1;
        n_bc(i) = Nodal(i,1);
        n_bc(i,2) = 1800;
    end

    if theta == 45 %collects nodes at right boundary of entire object
        flags(i,1) = Nodal(i,1);
        flags(i,2) = 1;
        n_bc(i) = Nodal(i,1);
        n_bc(i,2) = 0;
    end

    if r == .1 %collects nodes along essential BC
        flags(i,1) = Nodal(i,1);
        flags(i,2) = 2;
    end

    flags(i,1) = Nodal(i,1); %If no conditions are satisfied

end
%% Set up natural boundary conditions
% n_bc = [3  4
%     4  2
%     20 0
%     20 0];
% nbe = 2;
for i = 1:nnp
    if flags(i,2) == 1
        n_bc(i,1) = flags(i,1);
    end
end
 indices1 = find(n_bc(:,1) == 0);
 n_bc(indices1,:) = [];
 n_bc = [ 3 18 17 2 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 9 51 50 49 48 47 46 5 45 44 43 42 41 40 39 38 37 8 7 36 35 34 33 32 31 30 29 28 6 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 1 27 26 %Node 1
         18 17 2 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 9  51 50 49 48 47 46 5 45 44 43 42 41 40 39 38 37 8  7 36  35 34 33 32 31 30 29 28 6 81 80 79 78 77 76 75 74 73 72  71 70 69 68 67 1 27 26 4 %Node 2
         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 0  1300 1300 1300 1300 1300 1300 1300 1800 1800 1800 1800 1800 1800 1800 1800 1800 1800 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 0 0 0 0 0 0 0 0 %Flux value at node 1
         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 0  1300 1300 1300 1300 1300 1300 1300 1800 1800 1800 1800 1800 1800 1800 1800 1800 1800 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 0 0 0 0 0 0 0 0]; %Flux value at node 2
 nbe = 66;
%% Set up essential boundary condition vector e_bc
% e_bc = [1 0
%     2 0
%     3 0
%     4 1];
for i = 1:nnp
    if flags(i,2) == 2
        e_bc(i,1) = flags(i,1);
        e_bc(i,2) = 0;
    end
end
indices = find(e_bc(:,1) == 0);
e_bc(indices,:) = [];
%% Plot the natural boundary condition
for i = 1:nnp
    x(i) = Nodal(i,2);
    y(i) = Nodal(i,3);
end


for i=1:nbe
    
    node1 = n_bc(1,i);        % first node
    node2 = n_bc(2,i);        % second node
    x1 = x(node1); y1=y(node1);    % coord of the first node
    x2 = x(node2); y2=y(node2);    % coord of the second node
    
    plot([x1 x2],[y1 y2],'r','LineWidth',4); hold on
end
legend('natural B.C. (flux)');
%% Plot the mesh
x = Nodal(:,2);
y = Nodal(:,3);
plot(x,y,'.');
for i = 1:nel
    
    XX = [x(IEN(2,i)) x(IEN(3,i)) x(IEN(4,i)) x(IEN(2,i))];
    YY = [y(IEN(2,i)) y(IEN(3,i)) y(IEN(4,i)) y(IEN(2,i))];
    plot(XX,YY);
    hold on;
    
    if strcmpi(plot_nod,'yes')==1;
        text(XX(1),YY(1),sprintf('%0.5g',IEN(2,i)));
        text(XX(2),YY(2),sprintf('%0.5g',IEN(3,i)));
        text(XX(3),YY(3),sprintf('%0.5g',IEN(4,i)));
    end
end
fprintf(1,'  Mesh Params \n');
fprintf(1,'No. of Elements  %d \n',nel);
fprintf(1,'No. of Nodes     %d \n',nnp);
fprintf(1,'No. of Equations %d \n\n',neq);
%% Create Assemble B-Matrix/Assemble Conductivity Matrix

for e = 1:nel
    %Collect the necessary element nodes and nodal coordinates
    node_1 = IEN(2,e);
    node_2 = IEN(3,e);
    node_3 = IEN(4,e);
    x_1 = Nodal(node_1,2);
    y_1 = Nodal(node_1,3);
    x_2 = Nodal(node_2,2);
    y_2 = Nodal(node_2,3);
    x_3 = Nodal(node_3,2);
    y_3 = Nodal(node_3,3);
    
    %Calculate area of triangular element
    d1 = digits(5);
    A(e) = 0.5*((x_2*y_3 - x_3*y_2) - (x_1*y_3 - x_3*y_1) + (x_1*y_2 - x_2*y_1));
    
    %Assemble B Matrix
    
    B = [y_2-y_3 y_3-y_1 y_1-y_2; x_3-x_2 x_1-x_3 x_2-x_1] * (1/(2*A(e)));
    
    Bt = transpose(B);
    
    ke = kappa(e)*A(e)*Bt*B;
    
    sctr = IEN(2:4,e);
    K(sctr,sctr) = K(sctr,sctr) + ke;
end
%% Gauss Points
if ngp == 1
    gp = 0;
    w  = 2;
elseif ngp == 2   % if four gauss points are used (two in each direction)
    gp = [-0.57735027,  0.57735027 ];
    w  = [1,            1          ];   %
end
%% Assemble heat flux vector
for i = 1:nbe
    
    fq      = [0 0]';            % initialize the nodal source vector
    node1   = n_bc(1,i);         % first node
    node2   = n_bc(2,i);         % second node
    n_bce   = n_bc(3:4,i);       % flux value at an edge
    
    
    x1 = x(node1); y1=y(node1);    % coord of the first node
    x2 = x(node2); y2=y(node2);    % coord of the second node
    
    leng = sqrt((x2-x1)^2 + (y2-y1)^2);  % edge length
    J    = leng/2;                       % 1D Jacobian
    
    
    [w,gp] = gauss(ngp);                % get gauss points and weights
    
    for i=1:ngp                         % integrate in psi direction (1D integration)
        
        psi = gp(i);
        N   = 0.5*[1-psi  1+psi];       % 1D  shape functions in parent domain
        
        flux = N * n_bce;
        fq      = fq + w(i)*N' *flux*J;      % nodal flux
    end
    fq = -fq;  % define flux as negative integrals
    
    % Assemble nodal flux vector
    f(node1) = f(node1) + fq(1) ;
    f(node2) = f(node2) + fq(2);
    
end
%% Solve for the temperature values
% satisfy boundary conditions
for n=1:neq
    if (flags(n,2) == 2)
        t = find(e_bc == n);
        f = f - K(:,n)*e_bc(t,2);
        K(n,:) = zeros(1,neq);
        K(:,n) = zeros(neq,1);
        K(n,n) = 1.0;
        f(n)   = e_bc(t,2);
    end
end
% solve the FE system
d = K \ f;
%% Post-Processing/Plot the temperature field
% plot the temperature field
if strcmpi(plot_temp,'yes')==1;
    %   d1 = d(ID);
    figure(2);
    for e=1:nel
        XX = [x(IEN(2,e))  x(IEN(3,e))  x(IEN(4,e))  x(IEN(2,e)) ];
        YY = [y(IEN(2,e))  y(IEN(3,e))  y(IEN(4,e))  y(IEN(2,e)) ];
        dd = [d(IEN(2,e))  d(IEN(3,e))  d(IEN(4,e))  d(IEN(2,e)) ];
        patch(XX,YY,dd);hold on;
    end
    title('Temperature distribution'); xlabel('X'); ylabel('Y'); colorbar;
end
%% Post-Processing/Find and plot flux at every element
% get coordinates of element nodes
ind = 1;
for e = 1:nel
    sctr = IEN(2:4,e);
    de = d(sctr);    % extract temperature at  element nodes
    
    % compute flux vector
    node_1 = IEN(2,e);
    node_2 = IEN(3,e);
    node_3 = IEN(4,e);
    x_1 = Nodal(node_1,2);
    y_1 = Nodal(node_1,3);
    x_2 = Nodal(node_2,2);
    y_2 = Nodal(node_2,3);
    x_3 = Nodal(node_3,2);
    y_3 = Nodal(node_3,3);
    
    %Calculate area of triangular element
    d1 = digits(5);
    A(e) = 0.5*((x_2*y_3 - x_3*y_2) - (x_1*y_3 - x_3*y_1) + (x_1*y_2 - x_2*y_1));
    
    %Assemble B Matrix
    
    B = [y_2-y_3 y_3-y_1 y_1-y_2; x_3-x_2 x_1-x_3 x_2-x_1] * (1/(2*A(e)));
    
    %Find the x-y coordinates for the center of triangle
    
    Ox = (x_1+x_2+x_3)/3;
    Oy = (y_1+y_2+y_3)/3;
    
    q(:,ind) =  -kappa(e)*B*de;                  % compute the flux
    ind = ind+1;
    q_x = q(1,e);
    q_y = q(2,e);
    
    %Compute flux at gauss points
    if strcmpi(compute_flux,'yes')==1;
        fprintf(1,'\n                     Heat Flux at Gauss Points \n')
        fprintf(1,'----------------------------------------------------------------------------- \n')
        fprintf(1,'Element  %d \n',e)
        fprintf(1,'-------------\n')
    end
    %          #x-coord     y-coord    q_x(eta,psi)  q_y(eta,psi)
    flux_e1  = [Ox            Oy        q_x'              q_y'];
    fprintf(1,'\t\t\tx-coord\t\t\t\ty-coord\t\t\t\tq_x\t\t\t\t\tq_y\n');
    fprintf(1,'\t\t\t%f\t\t\t%f\t\t\t%f\t\t\t%f\n',flux_e1');
    
    if strcmpi(plot_flux,'yes')==1 & strcmpi(plot_mesh,'yes') ==1;
        figure(1);
        scale_factor = 0.00001;
        quiver(Ox,Oy,q_x'*scale_factor,q_y'*scale_factor,'k','AutoScale','off');
        plot(Ox,Oy,'rx');
        title('Heat Flux');
        xlabel('X');
        ylabel('Y');
    end
end